// @ts-check
/// <reference path="index.d.ts" />

const { writeFileSync, readFileSync } = require("fs")
const http = require("http")
const STORAGE_PATH = require("path").join(require("os").homedir(), ".ueli/moneyConverterData.json");

const API_LINK = `http://data.fixer.io/api/latest?access_key=${require("./api-key")}&format=1`
const ICON = "<path d=\"M 26.68 11.126 C 26.361 11.126 26.116 11.195 25.949 11.331 C 25.852 11.409 25.759 11.543 25.67 11.725 L 27.699 11.725 C 27.678 11.473 27.519 11.299 27.217 11.203 C 27.063 11.149 26.883 11.126 26.68 11.126 Z  M 24.876 11.936 L 23.064 11.936 C 23.08 12.13 23.179 12.269 23.372 12.353 C 23.564 12.436 23.769 12.477 23.98 12.477 C 24.234 12.477 24.429 12.427 24.574 12.33 C 24.718 12.232 24.82 12.101 24.876 11.936 Z  M 23.072 11.725 L 24.948 11.725 C 25.117 11.384 25.275 11.15 25.418 11.027 C 25.66 10.826 26.018 10.728 26.491 10.728 C 27.177 10.728 27.661 10.856 27.949 11.112 C 28.108 11.254 28.213 11.459 28.265 11.725 L 29.014 11.725 L 29.014 11.938 L 28.265 11.938 C 28.215 12.367 27.953 12.66 27.471 12.812 C 27.21 12.899 26.862 12.941 26.42 12.941 L 26.42 12.546 C 26.771 12.533 27.024 12.502 27.188 12.45 C 27.478 12.357 27.643 12.187 27.679 11.936 L 25.574 11.936 C 25.472 12.256 25.291 12.495 25.05 12.648 C 24.799 12.8 24.46 12.875 24.024 12.875 C 23.63 12.875 23.278 12.794 22.964 12.628 C 22.653 12.463 22.493 12.231 22.485 11.936 L 21.972 11.936 L 21.972 11.724 L 22.477 11.724 C 22.516 11.431 22.664 11.204 22.929 11.046 C 23.198 10.889 23.546 10.807 23.981 10.799 L 23.981 11.187 C 23.785 11.198 23.616 11.227 23.476 11.28 C 23.22 11.375 23.082 11.522 23.072 11.725 Z  M 25.496 9.284 C 23.047 9.284 21.066 10.425 21.066 11.834 C 21.066 13.241 23.049 14.383 25.496 14.383 C 27.944 14.383 29.926 13.242 29.926 11.834 C 29.926 10.423 27.944 9.284 25.496 9.284 Z  M 25.496 14.725 C 23.248 14.725 21.398 13.761 21.108 12.514 C 21.083 12.626 21.065 12.739 21.065 12.853 C 21.065 14.263 23.047 15.405 25.495 15.405 C 27.941 15.405 29.926 14.263 29.926 12.853 C 29.926 12.739 29.907 12.626 29.883 12.514 C 29.592 13.761 27.741 14.725 25.496 14.725 Z  M 25.496 15.748 C 23.248 15.748 21.398 14.786 21.108 13.538 C 21.083 13.649 21.065 13.762 21.065 13.878 C 21.065 15.288 23.047 16.429 25.495 16.429 C 27.941 16.429 29.926 15.287 29.926 13.878 C 29.926 13.762 29.907 13.649 29.883 13.538 C 29.592 14.783 27.741 15.748 25.496 15.748 Z  M 25.496 16.77 C 23.248 16.77 21.398 15.807 21.108 14.56 C 21.083 14.67 21.065 14.785 21.065 14.899 C 21.065 16.31 23.047 17.45 25.495 17.45 C 27.941 17.45 29.926 16.31 29.926 14.899 C 29.926 14.785 29.907 14.67 29.883 14.56 C 29.592 15.807 27.741 16.77 25.496 16.77 Z  M 25.496 17.794 C 23.248 17.794 21.398 16.831 21.108 15.582 C 21.083 15.695 21.065 15.808 21.065 15.924 C 21.065 17.334 23.047 18.474 25.495 18.474 C 27.941 18.474 29.926 17.334 29.926 15.924 C 29.926 15.808 29.907 15.695 29.883 15.582 C 29.592 16.831 27.741 17.794 25.496 17.794 Z  M 25.496 18.966 C 23.248 18.966 21.398 18.004 21.108 16.756 C 21.083 16.868 21.065 16.981 21.065 17.097 C 21.065 18.506 23.047 19.648 25.495 19.648 C 27.941 19.648 29.926 18.506 29.926 17.097 C 29.926 16.981 29.907 16.869 29.883 16.757 C 29.592 18.004 27.741 18.966 25.496 18.966 Z  M 25.496 19.99 C 23.248 19.99 21.398 19.027 21.108 17.779 C 21.083 17.892 21.065 18.004 21.065 18.12 C 21.065 19.529 23.047 20.671 25.495 20.671 C 27.941 20.671 29.926 19.529 29.926 18.12 C 29.926 18.004 29.907 17.892 29.883 17.779 C 29.592 19.027 27.741 19.99 25.496 19.99 Z  M 25.496 21.012 C 23.248 21.012 21.398 20.049 21.108 18.801 C 21.083 18.913 21.065 19.025 21.065 19.141 C 21.065 20.551 23.047 21.692 25.495 21.692 C 27.941 21.692 29.926 20.551 29.926 19.143 C 29.926 19.027 29.907 18.914 29.883 18.802 C 29.592 20.049 27.741 21.012 25.496 21.012 Z  M 25.496 22.035 C 23.248 22.035 21.398 21.073 21.108 19.824 C 21.083 19.937 21.065 20.048 21.065 20.164 C 21.065 21.575 23.047 22.716 25.495 22.716 C 27.941 22.716 29.926 21.575 29.926 20.164 C 29.926 20.048 29.907 19.937 29.883 19.824 C 29.592 21.073 27.741 22.035 25.496 22.035 Z  M 17.184 14.196 C 16.864 14.196 16.62 14.264 16.453 14.401 C 16.356 14.479 16.264 14.612 16.173 14.795 L 18.202 14.795 C 18.181 14.544 18.023 14.368 17.719 14.273 C 17.567 14.219 17.387 14.196 17.184 14.196 Z  M 15.381 15.007 L 13.57 15.007 C 13.584 15.201 13.685 15.339 13.877 15.423 C 14.07 15.506 14.273 15.546 14.485 15.546 C 14.738 15.546 14.936 15.498 15.08 15.401 C 15.224 15.302 15.324 15.169 15.381 15.007 Z  M 13.578 14.793 L 15.454 14.793 C 15.622 14.451 15.781 14.219 15.923 14.095 C 16.167 13.894 16.523 13.796 16.997 13.796 C 17.681 13.796 18.167 13.924 18.453 14.18 C 18.613 14.32 18.717 14.527 18.771 14.793 L 19.52 14.793 L 19.52 15.006 L 18.771 15.006 C 18.722 15.434 18.457 15.727 17.976 15.88 C 17.715 15.965 17.366 16.007 16.925 16.007 L 16.925 15.614 C 17.277 15.6 17.53 15.569 17.694 15.518 C 17.984 15.423 18.147 15.253 18.185 15.003 L 16.082 15.003 C 15.979 15.324 15.799 15.562 15.555 15.714 C 15.306 15.866 14.965 15.943 14.53 15.943 C 14.136 15.943 13.782 15.861 13.47 15.695 C 13.158 15.531 12.997 15.299 12.99 15.003 L 12.477 15.003 L 12.477 14.794 L 12.983 14.794 C 13.021 14.501 13.171 14.273 13.435 14.117 C 13.701 13.959 14.049 13.877 14.487 13.869 L 14.487 14.258 C 14.291 14.268 14.122 14.298 13.981 14.351 C 13.726 14.443 13.589 14.591 13.578 14.793 Z  M 16 12.351 C 13.549 12.351 11.57 13.492 11.57 14.901 C 11.57 16.309 13.552 17.45 16 17.45 C 18.448 17.45 20.43 16.309 20.43 14.901 C 20.43 13.492 18.448 12.351 16 12.351 Z  M 16 17.794 C 13.752 17.794 11.903 16.831 11.611 15.583 C 11.587 15.696 11.568 15.809 11.568 15.924 C 11.568 17.333 13.549 18.475 15.998 18.475 C 18.446 18.475 20.428 17.333 20.428 15.924 C 20.428 15.808 20.409 15.695 20.384 15.583 C 20.098 16.831 18.248 17.794 16 17.794 Z  M 16 18.817 C 13.752 18.817 11.903 17.854 11.611 16.606 C 11.587 16.718 11.568 16.83 11.568 16.946 C 11.568 18.356 13.549 19.498 15.998 19.498 C 18.446 19.498 20.428 18.356 20.428 16.946 C 20.428 16.83 20.409 16.718 20.384 16.606 C 20.098 17.854 18.248 18.817 16 18.817 Z  M 16 19.84 C 13.752 19.84 11.903 18.877 11.611 17.629 C 11.587 17.741 11.568 17.853 11.568 17.969 C 11.568 19.38 13.549 20.521 15.998 20.521 C 18.446 20.521 20.428 19.379 20.428 17.969 C 20.428 17.853 20.409 17.741 20.384 17.629 C 20.098 18.877 18.248 19.84 16 19.84 Z  M 16 20.861 C 13.752 20.861 11.903 19.899 11.611 18.65 C 11.587 18.763 11.568 18.875 11.568 18.991 C 11.568 20.401 13.549 21.542 15.998 21.542 C 18.446 21.542 20.428 20.401 20.428 18.991 C 20.428 18.875 20.409 18.763 20.384 18.65 C 20.098 19.899 18.248 20.861 16 20.861 Z  M 16 22.035 C 13.752 22.035 11.903 21.073 11.611 19.824 C 11.587 19.937 11.568 20.05 11.568 20.166 C 11.568 21.575 13.549 22.716 15.998 22.716 C 18.446 22.716 20.428 21.575 20.428 20.166 C 20.428 20.05 20.409 19.937 20.384 19.824 C 20.098 21.073 18.248 22.035 16 22.035 Z  M 7.688 17.414 C 7.369 17.414 7.125 17.483 6.959 17.62 C 6.862 17.696 6.769 17.83 6.679 18.013 L 8.709 18.013 C 8.687 17.761 8.529 17.586 8.226 17.491 C 8.073 17.439 7.893 17.414 7.688 17.414 Z  M 5.884 18.225 L 4.074 18.225 C 4.087 18.419 4.188 18.557 4.381 18.641 C 4.574 18.725 4.778 18.765 4.988 18.765 C 5.242 18.765 5.439 18.717 5.585 18.618 C 5.73 18.521 5.83 18.389 5.884 18.225 Z  M 4.082 18.013 L 5.958 18.013 C 6.128 17.671 6.285 17.437 6.428 17.313 C 6.672 17.114 7.028 17.016 7.501 17.016 C 8.186 17.016 8.671 17.143 8.959 17.399 C 9.118 17.542 9.224 17.747 9.275 18.013 L 10.024 18.013 L 10.024 18.225 L 9.275 18.225 C 9.226 18.655 8.963 18.947 8.481 19.101 C 8.221 19.187 7.872 19.228 7.429 19.228 L 7.429 18.833 C 7.783 18.822 8.035 18.789 8.2 18.739 C 8.49 18.645 8.652 18.474 8.689 18.223 L 6.586 18.223 C 6.482 18.545 6.303 18.782 6.059 18.935 C 5.808 19.089 5.469 19.163 5.034 19.163 C 4.64 19.163 4.286 19.082 3.974 18.915 C 3.661 18.751 3.501 18.519 3.494 18.223 L 2.983 18.223 L 2.983 18.012 L 3.489 18.012 C 3.525 17.719 3.675 17.491 3.939 17.334 C 4.206 17.177 4.555 17.095 4.991 17.085 L 4.991 17.475 C 4.795 17.486 4.626 17.515 4.486 17.568 C 4.232 17.661 4.093 17.81 4.082 18.013 Z  M 6.506 15.571 C 4.055 15.571 2.074 16.712 2.074 18.12 C 2.074 19.529 4.057 20.671 6.506 20.671 C 8.954 20.671 10.935 19.529 10.935 18.12 C 10.935 16.711 8.954 15.571 6.506 15.571 Z  M 6.506 21.012 C 4.257 21.012 2.407 20.049 2.116 18.801 C 2.092 18.915 2.074 19.027 2.074 19.143 C 2.074 20.552 4.055 21.693 6.504 21.693 C 8.952 21.693 10.934 20.552 10.934 19.143 C 10.934 19.027 10.915 18.915 10.89 18.803 C 10.604 20.049 8.752 21.012 6.506 21.012 Z  M 6.506 22.035 C 4.257 22.035 2.407 21.073 2.116 19.824 C 2.092 19.937 2.074 20.051 2.074 20.167 C 2.074 21.575 4.055 22.716 6.504 22.716 C 8.952 22.716 10.934 21.575 10.934 20.167 C 10.934 20.051 10.915 19.937 10.89 19.825 C 10.604 21.073 8.752 22.035 6.506 22.035 Z \"/>"

/**
 * @type {APIResponse | null}
 */
let data = null;
try {
    const raw = readFileSync(STORAGE_PATH, "utf-8");
    data = JSON.parse(raw);
    const today = new Date().toISOString().substr(0, 10); // 2018-09-05 = 10 chars
    console.log(today, data.date);
    if (data.date !== today) {
        throw Error;
    }
} catch (e) {
    http.get(API_LINK, (res) => {
        var body = '';

        res.on('data', function(chunk){
            body += chunk;
        });

        res.on('end', function(){
            writeFileSync(STORAGE_PATH, body, "utf-8");
            data = JSON.parse(body);
        });
    });
}
// let data = null;
/**
 * @type {ConvertData | null}
 */
let convertData = null;

module.exports.onlineSearcher = class Searcher {
    constructor() {
        this.needSort = false;
        this.shouldIsolate = true;
    }

    /**
     *
     * @param {string} input
     * @returns {Promise<Array<SearchResultItem>>}
     */
    async getSearchResult(input) {
        const factor = convertData.value / data.rates[convertData.from];
        return convertData.to.map((item) => {
            const converted = (factor * data.rates[item]).toLocaleString();

            return {
                executionArgument: "",
                name: `= ${converted} ${item}`,
                icon: ICON,
            };
        });
    }
}

module.exports.inputValidator = class Validator {
    /**
     *
     * @param {string} input
     * @returns {boolean}
     */
    isValidForSearchResults(input) {
        if (data) {
            const value = parseFloat(input);
            if (value !== NaN && value > 0) {
                const convertTerm = input.match(/[A-Za-z\s]+/);
                if (convertTerm) {
                    const trimmed = convertTerm[0].trim().toUpperCase();
                    const splitted = trimmed.split(" ");
                    if (splitted.length > 1) {
                        const from = splitted[0];
                        if (data.rates[from] !== undefined) {
                            splitted.shift();
                            if (splitted[0] === "TO") {
                                splitted.shift();
                            }

                            const validCurrency = splitted
                                .filter((item) => data.rates[item] !== undefined);

                            convertData = {
                                from,
                                to: validCurrency,
                                value
                            };
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }
}
